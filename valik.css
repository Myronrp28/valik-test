/*що до основных элементов страницы*/
html 
                {
                    height: 100%; /* высота ячейки html 100% */
                    width: 100%; /* ширина ячейки html 100% */
                    margin: 0; /* опредиляет отступы внешние для html */
                    padding:0; /* опредиляет внутренние отступы для элементов которые находятся в ячейке html */
                    font-family: Arial, Helvetica, sans-serif; /* задает стили текста в контейнере ячейке html */
                    background-size: 100%; /* задает размер заднего плана в ячейке html */
                    background-repeat: no-repeat; /* если ставишь картинку то она растягивается на всю страницу, если поставишь маленькуя картинку на фон то она будет не растягиваться а много раз повторяться что бы заполнить пространство в ячейке html */
                }

nav main aside 
                {
                    border: 5px solid;
                }
nav
                {
                    margin-left: 1vw; /* отступ от левого края основного контейнера в котором находится nav 1vw */
                    margin-right: 1vw; /* отступ от правого края основного контейнера в котором находится nav 1vw */
                    align-items: center; /* центрирует содержимое ячейки nav относительно центра в центре */
                    border-color: black;
                    
                }

main 
                {
                    width: 40%; /* ширина main равна 40% от ячейки в которой нахожится */
                    margin-left: 7vw; /* отступ слева равен 7vw от края ячейки в которой находится */
                    border-color: black;
                    
                }
            
aside
                {
                    border-color: black;
                    
                }  

table 
                {
                    width: 100%; /* ширина table равна 100% от ячейки/контейнера в котором находится */
                }

h4 
                {
                    font-size: 1.2vw; /* размер текста в h4 равен 1.2vw */
                    text-align: left; /* центрирование текста в h4 относительно центра слева */
                }

h5   
                {
                    font-size: 0.7vw; /* размер текста в h5 равен 0.7vw */
                    text-align: left; /* центрирование текста в h5 относительно центра слева */
                    color: rgb(62, 62, 62); /* цвет содержимого h5 */
                }

/*що до слайдера с 4 фотографиями*/
.wrapper 
                {
                    width: 100%; /* ширина wrapper равна 100% от контейнера или ячейки в котором нахожится */
                    height: 30vw; /* высота wrapper равна 30vw. vw зависит от размера непосредственно окна браузера. так что при уменьшении или увеличении vw изменяется пропорционально */
                    display: flex; /* создает flex контейнер который позволяет управлять расположением элементов */
                    align-items: center; /* в случае с флексбокс выравнивает объекты перпендикулярно оси контейнера. в флексбоксе ось расположена горизонтально, значит выравнивание будет относительно вертикальной оси и по центру  */
                    flex-direction: row;/* задает ось для обьектов в контейнере по горизонтали относительно которой можно сортировать обьекты  */
                    justify-content: center;  /* опредиляет выравнивание контента относительно оси главного направления контейнера. т е в направлении row(по горизонтали) и center- указывает что выравнивание по центру */
                }
  
.container       
                {
                    height: 20vw; /* задает высоту 20vw для контейнера */
                    display: flex; /* создает flex контейнер который позволяет управлять расположением элементов  */
                    flex-wrap: nowrap; /* опредиляет: должны ли обьекты переноситься на новую строку если они не вмещаются. в данном случае nowrap говорит что не должны переноситься */
                    flex-direction: row; /* задает ось для обьектов в контейнере по горизонтали относительно которой можно сортировать обьекты */
                    justify-content: start; /* опредиляет выравнивание контента относительно оси главного направления контейнера.т е в направлении row(по горизонтали). start означает что выравнивание будет слева по горизонтали и сверху по вертикали. т е грубо говоря слева сверху */
                }
  
.card    
                {
                    width: 15vw; /* задает ширну контейнера .card */
                    border-radius: .50rem; /* задает скругление по краям контейнера .card радиусом .75em */
                    background-size: cover; /* делает так что бы изображение масштабировалось на всю площадь пространства. если понадобится то будет обрезана лишняя часть изо */
                    cursor: pointer;/* указывает на то что при наведении на этот контейнер курсор изменяется на тип pointer */
                    overflow: hidden;/* указывает на то что все обьекты которые выходят за границы контейнера будут скрыты */
                    margin: 0 -1vw; /* указывает отступ 0 и -1vw */
                    display: flex; /* добавляет flex в контейнер card что бы можно было управлять располодением находищимися в нем объектов */
                    align-items: flex-end; /* конкретно эта команда выравнивает элементы по вертикали вниз. а если использовать justify-content: flex-end- то будет по вертикали вниз и по горизонтали вправо, т е в правый нижний угол  */
                    transition: .6s cubic-bezier( .28,-0.03,0,.99); /* задает анимацию с задержкой 0.6секунд. анимация Кривая Безье. первые два числа регулируют крутизну кривой в начале анимации, а последний два- в конце. еще бы знать что такое кривая безье... */
                    box-shadow: -0.3vw 0 0.5vw  rgba(0,0,0,0.8); /* задает тень к контейнеру с 0vw смещением по горизонтали, 1vw смещением по горизонтали, 1vw величиной тени, -0.5vw размер тени которая располодена за обьектом */
                }
  
.card>.row      /* выбирает все обьекты к контейнере .card  с пометкой .row*/
                {
                    color:white; /* задает белый цвет для всех обьектов row в контейнере card */
                    display: flex;/* устанавливает для row контейнер flex внутри card что позволяет управлять их расположением и выравниванием */
                    flex-wrap: nowrap;/* устанавливает параметр для "дочерних" элементов flex контейнера что при нехватке места они не переносятся на новую строку */
                }
  
.card>.row>.description 
                {
                    display:flex;/* устанавливает для контейнера description который находится внутри row который внутри card контейнер flex что позволяет управлять их расположением и выравниванием*/
                    justify-content: center;/* выравнивает обьекты в этом контейнере по центру относительно оси flex direction*/
                    flex-direction:row;/*задает ось для обьектов в контейнере по горизонтали относительно которой можно сортировать обьекты */
                    overflow: hidden; /* указывает на то что обьекты которые выходят за границы контейнера должны быть hidden- т е скрыты*/
                    text-align: left; /* задает центрирование текста слева*/          
                    height: 1vw;/* задает высоту контейнера 1vw */
                    width: 2vw;/* задает ширину контейнера 2vw */
                    opacity: 0;/* указывает начальное значение прозрачности */
                    transition-delay: .3s;/* задает задержку анимации 0.3 секунды */
                    transition: all .3s ease;/* применяет анимацию для всех свойств где all- анимированы все свойства элемента, .3s- время за которое происходит анимация, ease- обеспечивает плавный переход между состояниями */
                }
  
.description    
                {
                    text-transform: uppercase; /*указывает на то что текст написанный в этом контейнере должен быть написан с CapsLock/курсивом*/
                }
                
.description p  
                {
                    color: #b0b0ba; /*задает цвет*/
                    padding-top: 5px; /* отступ для внутренних элементов от верха 5px */
                }

input[type="radio"] 
                {
                    display: none; /* Скрываем стандартное отображение радио-кнопок */
                }
input:checked+label.card    /*указываешь на элемент label с классом card который находится в input непосредственно */  
                {
                    width:28vw; /* задаешь ширину обьекта 28vw */
                }
  
input:checked+label.card .description  /* указываешь на элемент класса description который находится внутри объекта label с классом card который находится непосредственно в input */
                {
                    opacity: 1 !important; /* говорит что обьект должен быть не прозрачным, !important говорит что этоусловие в приоритете и должно выполняться даже если будет конфликтовать с другими условиями в css */
                    transform: translateY(0) !important;  /* условие которое перемещает обьект по горизонтали (по оси Y) и оно так же в приоритете */
                }

.card[for="c1"]  
                {
                    background: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0)), url(roles/jett.png);/* задает тень для фона. linear-gradient- линейный градиент, to top- снизу к верхку, rgba- означает цветовую модель в диапазоне RGB(красный,зеленый,синий) 
                                                                                                                        и значение A(уровень прозрачности). цифры в скобках обозначают соответственно модели rgba. чем больше последнее значение (A) тем интенсивнее градиент. url() ставит фотку на фон */
                    background-size: cover;
                    background-clip: content-box;
                }

.card[for="c2"]
                {
                    background: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0)), url(roles/sova.png);/* задает тень для фона. linear-gradient- линейный градиент, to top- снизу к верхку, rgba- означает цветовую модель в диапазоне RGB(красный,зеленый,синий) 
                                                                                                                        и значение A(уровень прозрачности). цифры в скобках обозначают соответственно модели rgba. чем больше последнее значение (A) тем интенсивнее градиент. url() ставит фотку на фон */
                    background-size: cover;
                    background-clip: content-box;
                }

.card[for="c3"]
                {
                    background: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0)), url(roles/brimm.png);/* задает тень для фона. linear-gradient- линейный градиент, to top- снизу к верхку, rgba- означает цветовую модель в диапазоне RGB(красный,зеленый,синий) 
                                                                                                                        и значение A(уровень прозрачности). цифры в скобках обозначают соответственно модели rgba. чем больше последнее значение (A) тем интенсивнее градиент. url() ставит фотку на фон */
                    background-size: cover;
                    background-clip: content-box;
                }

.card[for="c4"]
                {
                    background: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0)), url(roles/sage.png);/* задает тень для фона. linear-gradient- линейный градиент, to top- снизу к верхку, rgba- означает цветовую модель в диапазоне RGB(красный,зеленый,синий) 
                                                                                                                        и значение A(уровень прозрачности). цифры в скобках обозначают соответственно модели rgba. чем больше последнее значение (A) тем интенсивнее градиент. url() ставит фотку на фон */
                    background-size: cover;
                    background-clip: content-box;
                }

/* що до кнопкок которые появляюься под фоткой */                

.buttons-container 
                {
                    flex-direction: column; /* задает ось для обьектов в контейнере по вертикали относительно которой можно сортировать обьекты */
                    align-items: center;/* центрирование обьектов в контейнере по центру относительно оси направления */ 
                    display: flex; /* дает возможность регулировать расположение элементов в контейнере */
                    opacity: 0; /* Начальная непрозрачность */
                    
                }

.custom-button 
                {
                    display: flex;/*создание "гибкого" контейнера. дочерние элементы можно распредилять внутри с помощью доп команд */
                    align-items: center; /* центрирование эелементов к центру относительно оси */
                    border: none; /* задает отсутствие рамок */
                    cursor: pointer; /* задает иконку курсора "pointer" */
                    border-radius: 0.5vw;/* задает скругление углов обьекта с радиусом 0.5vw */
                    width: 90%; /* ширина обьекта которая равно 90% от контейнера в котором распологается объект */
                    margin-top: 0.8vw;/* отступ от верха 0.5vw */
                    margin-left: 1vw; /* задает отступ слева 1vw */
                    background-color:#efefef; /* задает цвет фона */
                    box-shadow: 0vw 0.1vw 1.5vw -0.5vw rgba(0,0,0,0.8); /* задает тень для объекта где 0vw-горизонтальное смещение относительно элемента, 0vw- вертикальное смещение относительно элемента, 1vw- расстояние размытия элемента(чем больше значение-тем больше размытие), -0.5vw - размер тени+ отрицательное значение говорит нам о том что тень будет за объектом, дальше настроки цвета */
                    opacity: 0; /* Начальная непрозрачность */
                }

.custom-button:hover 
                {
                    transform: scale(1.05); /* Задает увеличение кнопки при наведении 5% */
                    transition: transform 0.2s ease-in-out; /* Воспроизведение анимации в течении 0.2s */
                }

.button-content {
                    display: flex; /* дает возможность регулировать расположение элементов в контейнере */
                    flex-direction: row; /* задает ось для обьектов в контейнере по горизонтали относительно которой можно сортировать обьекты */
                    align-items: center;
                    justify-content: space-between; /* Равное распределение между объектами внутри кнопки */
                    height: 100%; /* Занимаем всю высоту кнопки */
                    font-size: 1vw;
                    font-family: Verdana;
                }

.button-content img 
                {
                    /*width: 1.1vw;*/ /* ширина фотографий которые находятся в контейнере button-content - 1.1vw */
                    /*height: 1vw;*/ /* высота фотографий которые находятся в контейнере button-content - 1vw */
                    margin: auto; /* Центрирование изображения авто */
                }

.custom-button span 
                {
                    flex-grow: 1;
                    text-align: center;
                    margin: 0 2vw;
                }
               
.custom-button .button-content 
                {
                    display: flex;
                    justify-content: space-between;
                }

.hidden 
                {
                    display: none; /* Скрыть кнопку */
                }
                
/*анимации доп*/

.custom-button.fade-in 
                {
                    animation: fadeInButton 0.3s forwards; /* Анимация для появления кнопки */
                    animation-delay: var(--delay); /* Задержка для последовательного появления */
                }
                                
.buttons-container.fade-in 
                {
                    animation: fadeInButtons 0.5s forwards; /* Анимация для появления кнопок */
                }
                
@keyframes fadeInButtons 
                {
                    from {
                        opacity: 0;
                    }
                    to {
                        opacity: 1;
                    }
                }
                
@keyframes fadeInButton 
                {
                    from {
                        opacity: 0;
                    }
                    to {
                        opacity: 1;
                    }
                }
                





                .info-window {
                    position: relative;
                    width: 100%;
                    height: 100%;
                    float: right;
                }
                .info-container {
                    width: 40%; /* Или другое значение ширины, в зависимости от ваших дизайнерских потребностей */
                    height: 40%;
                    float: right;
                } 